#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define LAYER_MAIN 0
#define LAYER_GAME 1
#define LAYER_NAV 2
#define LAYER_FN 3
#define LAYER_NMPAD 4
#define LAYER_SYS 5
#define LAYER_MIRROR 6

#define HYPER LC(LS(LA(LEFT_GUI)))
#define VM_CAPS &lt LAYER_NAV ESCAPE

// Ergodox Wireless key positions index for positional hold-tap

// Define aliases for left-hand keys (sorted by label)
#define LN01 1
#define LN02 2
#define LN03 3
#define LN04 4
#define LN05 5
#define LN06 6
#define LN07 7

#define LT01 15
#define LT02 16
#define LT03 17
#define LT04 18
#define LT05 19
#define LT06 20
#define LT07 21

#define LM01 29
#define LM02 30
#define LM03 31
#define LM04 32
#define LM05 33
#define LM06 34

#define LB01 41
#define LB02 42
#define LB03 43
#define LB04 44
#define LB05 45
#define LB06 46
#define LB07 47

#define LC01 55
#define LC02 56
#define LC03 57
#define LC04 58
#define LC05 59

// Define aliases for right-hand keys (sorted by label)
#define RN01 14
#define RN02 13
#define RN03 12
#define RN04 11
#define RN05 10
#define RN06 9
#define RN07 8

#define RT01 28
#define RT02 27
#define RT03 26
#define RT04 25
#define RT05 24
#define RT06 23
#define RT07 22

#define RM01 40
#define RM02 39
#define RM03 38
#define RM04 37
#define RM05 36
#define RM06 35

#define RB01 54
#define RB02 53
#define RB03 52
#define RB04 51
#define RB05 50
#define RB06 49
#define RB07 48

#define RC01 64
#define RC02 63
#define RC03 62
#define RC04 61
#define RC05 60

// Define aliases for left thumb keys (updated sequence)
#define LH01 65
#define LH02 70
#define LH03 66
#define LH04 69
#define LH05 71
#define LH06 75

// Define aliases for right thumb keys (updated sequence)
#define RH01 74
#define RH02 73
#define RH03 68
#define RH04 67
#define RH05 72
#define RH06 76

#define LEFT_HAND_KEYS      \
        LN01 LN02 LN03 LN04 LN05 LN06 LN07 \
        LT01 LT02 LT03 LT04 LT05 LT06 LT07 \
        LM01 LM02 LM03 LM04 LM05 LM06      \
        LB01 LB02 LB03 LB04 LB05 LB06 LB07 \
        LC01 LC02 LC03 LC04 LC05

#define RIGHT_HAND_KEYS     \
        RN07 RN06 RN05 RN04 RN03 RN02 RN01 \
        RT07 RT06 RT05 RT04 RT03 RT02 RT01 \
        RM06 RM05 RM04 RM03 RM02 RM01      \
        RB07 RB06 RB05 RB04 RB03 RB02 RB01 \
        RC05 RC04 RC03 RC02 RC01

#define THUMB_KEYS                        \
                 LH01 LH03 RH04 RH03      \
            LH04 LH02 LH05 RH05 RH02 RH01 \
                      LH06 RH06

// Define main_layer bindings for the left half
#define MAIN_LAYER_LN &none             &kp NUMBER_1        &kp NUMBER_2        &kp NUMBER_3        &kp NUMBER_4        &kp NUMBER_5 &none
#define MAIN_LAYER_LT &none             &kp Q               &hml HYPER W        &kp E               &kp R               &kp T        &kp EQUAL
#define MAIN_LAYER_LM VM_CAPS           &hml LGUI A         &hml LALT S         &hml LCTRL D        &hml LSHIFT F       &kp G
#define MAIN_LAYER_LB &lt LAYER_SYS F13 &kp Z               &kp X               &kp C               &kp V               &kp B        &kp BACKSPACE
#define MAIN_LAYER_LC &none             &none               &none               &kp HYPER           &lt LAYER_FN SPACE

// Define main_layer bindings for the right half
#define MAIN_LAYER_RN &none             &kp NUMBER_6     &kp NUMBER_7      &kp NUMBER_8 &kp NUMBER_9 &kp NUMBER_0        &kp MINUS
#define MAIN_LAYER_RT &kp MINUS         &kp Y            &kp U             &kp I        &kp O        &kp P               &kp BACKSLASH
#define MAIN_LAYER_RM                   &kp H            &hmr RSHIFT J     &hmr RCTRL K &hmr LALT L  &hmr RGUI SEMICOLON &kp SINGLE_QUOTE
#define MAIN_LAYER_RB &kp DELETE        &kp N            &hmr HYPER M      &kp COMMA    &kp PERIOD   &kp SLASH           &kp BACKSPACE
#define MAIN_LAYER_RC &none             &kp LEFT_BRACKET &kp RIGHT_BRACKET &none        &none

// Define main_layer bindings for thumb keys
#define MAIN_LAYER_THUMBS \
                          &kp LALT             &kp LSHIFT         &kp K_APPLICATION &kp INSERT                                     \
    &mt LEFT_SHIFT GRAVE  &lt LAYER_NMPAD TAB  &kp LCTRL          &none             &lt LAYER_NMPAD RETURN    &lt  LAYER_NAV SPACE \
                                               &kp LEFT_GUI       &none


#define LAYER(LAYER_NAME, BINDINGS) \
    layer_##LAYER_NAME { \
        bindings = <BINDINGS>; \
    };
    

#define TAP_HOLD(NAME, HOLD, TAP, TRIGGER_KEY_POSITIONS) \
    NAME: NAME { \
        compatible = "zmk,behavior-hold-tap"; \
        label = "NAME"; \
        flavor = "balanced"; \
        hold-trigger-key-positions = <TRIGGER_KEY_POSITIONS>; \
        hold-trigger-on-release; \
        tapping-term-ms = <200>; \
        quick-tap-ms = <0>; \
        #binding-cells = <2>; \
        bindings = <HOLD>, <TAP>; \
    };
#define TAP_HOLD_LEFT(NAME, HOLD, TAP) \
    TAP_HOLD(NAME, HOLD, TAP, RIGHT_HAND_KEYS THUMB_KEYS)
#define TAP_HOLD_RIGHT(NAME, HOLD, TAP) \
    TAP_HOLD(NAME, HOLD, TAP, LEFT_HAND_KEYS THUMB_KEYS)

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

/ {
    behaviors {
        TAP_HOLD_LEFT(hml, &kp, &kp)
        TAP_HOLD_RIGHT(hmr, &kp, &kp)
    };
    
    combos {
        compatible = "zmk,combos";

        // m,: =>
        COMBO(combo_arrow,    &arrow, RB05 RB04)  
        // we: (
        COMBO(combo_lprn,     &kp LS(NUMBER_9), LT03 LT04)
        // er: (
        COMBO(combo_rprn,     &kp LS(NUMBER_0), LT04 LT05)
        // cv: () => {};
        COMBO(combo_arrow_fn, &arrow_fn, 44 45)
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap     &kp EQUAL>
                , <&macro_tap     &kp LS(PERIOD)>
                ;
        };
        arrow_fn: arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap     &kp LS(NUMBER_9)>
                , <&macro_tap     &kp LS(NUMBER_0)>
                , <&macro_tap     &kp SPACE>
                , <&macro_tap     &kp EQUAL>
                , <&macro_tap     &kp LS(PERIOD)>
                , <&macro_tap     &kp SPACE>
                , <&macro_tap     &kp LS(LEFT_BRACKET)>
                , <&macro_tap     &kp LS(RIGHT_BRACKET)>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        LAYER(LAYER_MAIN, 
              MAIN_LAYER_LN MAIN_LAYER_RN
              MAIN_LAYER_LT MAIN_LAYER_RT
              MAIN_LAYER_LM MAIN_LAYER_RM
              MAIN_LAYER_LB MAIN_LAYER_RB
              MAIN_LAYER_LC MAIN_LAYER_RC
                  MAIN_LAYER_THUMBS
        );

        game_layer {
            bindings = <
&sys_off
&kp ESCAPE        &kp NUMBER_1  &kp NUMBER_2         &kp NUMBER_3  &kp NUMBER_4     &kp NUMBER_5  &kp N6    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB           &kp Q         &kp W                &kp E         &kp R            &kp T         &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &kp A         &kp S                &kp D         &kp F            &kp G                           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &kp Z         &kp X                &kp C         &kp V            &kp C         &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans            &trans        &sl LAYER_MIRROR     &trans        &kp SPACE                                                &trans  &trans  &trans  &trans  &trans
                                                     &trans  &trans    &trans  &trans
                                          &trans     &trans  &trans    &trans  &trans  &trans
                                                             &trans    &trans
            >;
        };

        nav_layer {
            bindings = <
&sys_off
&none                    &kp NUMBER_1        &kp NUMBER_2           &kp NUMBER_3                        &kp NUMBER_4                        &kp NUMBER_5      &none            &none              &kp NUMBER_6       &kp NUMBER_7    &kp NUMBER_8  &kp NUMBER_9     &kp NUMBER_0   &kp MINUS
&none                    &none               &kp LS(COMMA)          &kp LS(NUMBER_9)                    &kp LS(NUMBER_0)                    &arrow            &trans           &trans             &kp HOME           &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &kp INSERT     &trans
&trans                   &kp LEFT_GUI        &kp LALT               &kp LCTRL                           &kp LSHIFT                          &arrow_fn                                             &kp LEFT_ARROW     &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans         &trans
&none                    &kp LC(Z)           &kp LC(X)              &hml LC(C) LS(LEFT_BRACKET)  &hml LC(V) LS(RIGHT_BRACKET)                   &none            &trans             &trans             &kp BACKSPACE      &kp DELETE      &trans        &trans           &trans         &trans
&none                    &none               &none                  &none                          &trans                                                              &trans             &none              &none           &none         &none
                                                                                       &trans  &trans    &trans   &trans
                                                                       &trans          &trans  &trans    &trans   &trans             &trans
                                                                                               &trans    &trans
            >;
        };

        fn_layer {
            bindings = <
&trans
&trans  &trans    &trans        &trans     &trans          &trans  &trans    &trans  &trans   &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans        &trans     &trans          &trans  &trans    &trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &kp LGUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans                    &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans    &trans        &trans     &trans          &trans  &trans    &trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans
&trans  &trans    &trans        &trans     &trans                                             &trans  &trans  &trans  &trans  &trans
                                                           &trans  &trans    &trans  &trans
                                           &trans          &trans  &trans    &trans  &trans   &trans
                                                                   &trans    &trans
            >;
        };

        num_pad_layer {
            bindings = <
&sys_off
&none     &none      &none         &none           &none          &none  &none                   &none                 &none        &none           &none            &none         &none         &none
&none     &none      &none         &none           &none          &none  &none                   &none                 &kp EQUAL    &kp NUMBER_7    &kp NUMBER_8     &kp NUMBER_9  &none         &none
&none     &kp LGUI   &kp LEFT_ALT  &kp LCTRL       &kp LEFT_SHIFT &none                                                &kp MINUS    &kp NUMBER_4    &kp NUMBER_5     &kp NUMBER_6  &none         &none
&none     &none      &none         &none           &none          &none  &none                   &none                 &kp NUMBER_0 &kp NUMBER_1    &kp NUMBER_2     &kp NUMBER_3  &none         &none
&none     &none      &none         &none           &none                                                                            &none           &none            &none         &none         &none  
                                                                 &none  &none                   &none                 &none
                                                   &none         &none  &none                   &none                 &kp SPACE  &none
                                                                        &kp RETURN              &none
            >;
        };

        sys_layer {
            bindings = <
&sys_off
&none           &none         &none         &none         &none          &none                 &bootloader    &bootloader  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &out OUT_USB
&none           &kp C_MUTE    &kp C_VOL_UP  &kp C_VOL_DN  &none          &none                 &none          &none        &none           &none         &none         &none         &none          &out OUT_BLE
&none           &kp C_PREV    &kp C_PP      &kp C_NEXT    &none          &to LAYER_GAME                                    &none           &none         &none         &none         &none          &bt BT_CLR
&none           &none         &none         &none         &none          &to LAYER_MAIN        &none          &none        &none           &none         &none         &none         &none          &bt BT_CLR_ALL
&none           &none         &none         &none         &none                                                            &none         &none         &none         &none          &none
                                                                        &none  &none          &none        &none
                                                          &none         &none  &none          &none        &none  &none
                                                                               &none          &none
            >;
        };

        mirror_layer {
            bindings = <
&sys_off
&kp MINUS         &kp N0         &kp N9      &kp N8     &kp N7  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp BACKSLASH     &kp P          &kp O       &kp I      &kp U   &kp Y   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp SINGLE_QUOTE  &kp SEMICOLON  &kp L       &kp K      &kp J   &kp H                     &trans  &trans  &trans  &trans  &trans  &trans
&kp RETURN        &kp SLASH      &kp PERIOD  &kp COMMA  &kp M   &kp N   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans            &trans         &trans      &trans     &trans                                    &trans  &trans  &trans  &trans  &trans
                                                                &trans  &trans    &trans  &trans
                                                        &trans  &trans  &trans    &trans  &trans  &trans
                                                                        &trans    &trans
            >;
        };
    };
};